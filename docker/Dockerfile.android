# Dockerfile for building a CI image that is used for Android compilation
FROM viaduck/ci
SHELL ["/bin/bash", "-c"]

ARG ANDROID_CMDLINE_TOOLS=11076708
ARG NDK_VERSION=r27c
ARG NDK_VERSION_DIRECTORY=27.2.12479018

# add nodesource repo
RUN curl -sSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | gpg --dearmor > /etc/apt/keyrings/nodesource.gpg
RUN echo "deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_20.x nodistro main" | tee /etc/apt/sources.list.d/nodesource.list

# pin nodejs to nodesource repo
RUN echo -e \
        "Package: nodejs\n" \
        "Pin: origin deb.nodesource.com\n" \
        "Pin-Priority: 600\n\n" \
        > /etc/apt/preferences.d/nodejs

RUN apt-get update && apt-get upgrade -y && apt-get install -y \
        # download and unpack
        wget tar unzip \
        # ndk compatibility
        lib32stdc++6 lib32z1 \
        # java for android tools
        openjdk-17-jdk \
        # required for building gui-common (from nodesource)
        nodejs

RUN rm -rf /var/lib/apt/lists/*

# download sdk
RUN mkdir -p /android/
WORKDIR /android/
RUN wget -nv -O sdk.zip https://dl.google.com/android/repository/commandlinetools-linux-${ANDROID_CMDLINE_TOOLS}_latest.zip
RUN unzip -q -d sdk sdk.zip
# fix for sdkmanager expected location sdk/cmdline-tools/latest/...
RUN mv sdk/cmdline-tools sdk/latest && mkdir -p sdk/cmdline-tools && mv sdk/latest/ sdk/cmdline-tools/
RUN echo ${ANDROID_CMDLINE_TOOLS} > sdk/version.txt

# setup env
ENV PATH "${PATH}:/android/sdk/cmdline-tools/latest/bin/"
ENV ANDROID_HOME "/android/sdk/"
ENV ANDROID_NDK "/android/sdk/ndk/${NDK_VERSION_DIRECTORY}"

# accept licenses
RUN set +o pipefail
RUN yes | sdkmanager --licenses
RUN set -o pipefail

# install stuff
RUN sdkmanager "platform-tools"
RUN sdkmanager "platforms;android-30"
RUN sdkmanager "platforms;android-29"
RUN sdkmanager "platforms;android-28"
RUN sdkmanager "platforms;android-27"
RUN sdkmanager "build-tools;28.0.3"

# symlink latest build-tools for expected location sdk/build-tools/latest/... if not already exists
RUN cd sdk/build-tools && if [ ! -L latest ]; then ln -s $(ls -1dt * | sort -rn | sed 1q) latest; fi

# download commonly used ndk versions
RUN wget -nv -O ndk.zip https://dl.google.com/android/repository/android-ndk-${NDK_VERSION}-linux.zip
RUN unzip -q ndk.zip
# move ndk to correct directory
RUN mkdir -p sdk/ndk/ && mv android-ndk-${NDK_VERSION} sdk/ndk/${NDK_VERSION_DIRECTORY}

# cleanup
RUN rm -f sdk.zip ndk.zip
WORKDIR /
